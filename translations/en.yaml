# English

global.title: "Learn Promises"

event_loop.title: "The Event Loop"
event_loop.single_thread:
  "When working with JavaScript it is useful to think as if everything is running on a single thread. While there are some exceptions (see Web Workers) to this rule most of the time when dealing with UI code everything will be running in a single thread."
event_loop.event_loop_works:
  "This thread is controlled by an event loop. The event loop is responsible for running functions (event handlers) in response various stimuli such as user generated actions, scheduled functions (such as setTimeout or setInterval) or network IO."

callbacks.title: "Callbacks"
callbacks.blocking_calls:
  "In many programming languages performing actions which may need to wait on external resources such as the network results in blocking the thread and prevents subsequent functions from running until the blocking call is complete."
callbacks.blocking_example_description:
  "In the above code the <code>http.get</code> call will block and the <code>performUpdateWithResponse</code> function will not run until the response has been fetched from the remote server."
callbacks.blocking_problems:
  "Unfortunately, this pattern is problematic when programming in the browser because blocking the main thread effectively pauses the event loop and prevents any user interactions from being handled. This results in a very unsatisfying user experience."
callbacks.asynchronous_solution:
  "The common solution to this problem is to perform the blocking operation asynchronously. This means the process will yield control back to the event loop while waiting for the network IO to be completed."
callbacks.callback_function:
  "The most common pattern for resuming code flow from the asynchronous operation is too provide a callback function which will be invoked in the future when the external resource is ready."
callbacks.callback_example_description:
  "In the above example a callback function is passed as an argument into the <code>http</code> module's <code>get</code> method. When the response is returned from  <span class='s1'>'www.example.com'</span> the callback will be invoke with the server's response."

using_promises.title: "Using Promises"
using_promises.1:
  "Promises build on top of the idea of callbacks to let you wrap some work with the promise that some point in the future it's callback will be called."
using_promises.with_a_promise:
  "Now with a different function, instead of giving a callback function we return a promise for the image. This promise will <b>resolve</b> when the image loads. A promise is a simple object with one method. Its then(function) method lets you define what to do when its work is complete or resolves."
using_promises.can_call_later:
  "The first benefit promises give us at this point is they always call the given callbacks, even after the event has occured. You could attach your callbacks when you first created your image element. Or way later, once the image has already loaded. In both cases, the callbacks will be called and you can know the image was loaded."
using_promises.call_multiple_times:
  "The second thing we can use promises for, is to attach multiple callbacks. With events you can attach many callbacks with individual calls to addEventListener. With a promise you can call then() each time for the callback you want to add."
using_promises.configure_later:
  "Promises really come into power once we want to separate what work is being performed and when that work is complete. If we wrapped image loading in a function you would need to handle all of the callbacks as arguments. This can be a problem if you want to split up your source and subscribe callbacks from different areas of the source. With a returned promise, your code can pass the promise around letting whatever code to attach throught the then() method."

making_promises.title: "Make Promises and Keeping Them"
making_promises.about_loadImagePromise:
  "On the last page we used <code class='nx'>loadImagePromise</code>. Now let's define what that actually does."
making_promises.define_loadImagePromise:
  "A common pattern for loading an image with JavaScript is to create an <code class='nx'>Image</code> element, attach some listeners, set the <code class='nx'>src</code> field to load and wait. Where we attach the listeners is where we can create our promise."
making_promises.pre_transform:
  "The <code class='nx'>Promise</code> constructor has one argument. The function you pass will be immediately be called and handed the <code class='nx'>resolve</code> function that the scope of the function can deal with however it desires. In our image loading use case, we could simply attach <code class='nx'>resolve</code> as the listener. But we can take the work step further."
making_promises.after_pre_transform:
  "If instead of attaching <code class='nx'>resolve</code> as a listener we make our own listener and in it call <code class='nx'>resolve</code>, we can call resolve with the argument we want. In a lot of cases for loading an image you probably want the image itself, with a promise and its <code class='nx'>resolve</code> function we can easily pass that making <code class='nx'>loadImagePromise</code> more useful."

errbacks.title: "Callbacks and Errors"
errbacks.handling_errors:
  "When dealing with asyncronous programming one of the common problems is handling errors. In a traditional syncronous code flow, throwing ean exception is an easy way to signal an error has occurred."
errbacks.async_problems:
  "Unfortunatly this technique doesn't work with asyncronous code because we have no way to wrap or code that will run in the future in a try, catch."
errbacks.multi_callbacks:
  "One common solution often used by asyncronous code is to provide two callbacks. One callback is called in the success case and provided the desired arguments. The other callback is only called when there is an unexpected error and the error is passed in as an argument."
errbacks.node_callbacks:
  "Another common solution which is popular in the Node.js ecosystem is to provide an error argument to a single callback. In this technique the callback is responsible for checking the error argument (typically the first argument) to identify errors."

reject_catch.title: "Promises are Made to be Broken"
reject_catch.then_reject:
  "<code class='nx'>then</code> in ES6 Promises has two arguments. We covered the first, <code class='nx'>resolve</code>, but it also has a second called <code class='nx'>reject</code>. This means <code class='nx'>then</code> follows the two function pattern for callbacks and error callbacks."
reject_catch.handle_reject:
  "Like <code class='nx'>resolve</code> handlers, <code class='nx'>reject</code> handlers take one argument. Commonly, they will be an instance of an <code class='nx'>Error</code>. But they could be any value. The reject handler being called is how you know something went wrong."
reject_catch.making_broken_promise:
  "In <a href='making-promises.html'>Make Promises and Keeping Them</a>, we presented how to make a promise and resolve it. Now we can add to <code class='nx'>loadImagePromise</code> and allow the returned promise to deal with errors that can occur in loading an image. Like <code class='nx'>then</code> the <code class='nx'>Promise</code> argument gets a second function that is used for rejecting the promise."
reject_catch.try_catch_wrapper:
  "Promises wrap each call to a <code class='nx'>then</code> handler with an implicit <code class='nx'>try</code>/<code class='nx'>catch</code>. This can be confusing when debugging as it can gobble up errors from the code that first calls a promise's <code class='nx'>reject</code> as well as gobble up errors in your code in a promise callback. To deal with this we can add a reject handler after our first <code class='nx'>then</code>."
reject_catch.simple_chain:
  "Promises have a nice convenience method called <code class='nx'>catch</code> that takes one argument, a reject handler. It is shorthand for calling <code class='nx'>then</code> with <code class='kc'>undefined</code> as the first argument and a reject handler. This <code class='nx'>catch</code> method is really great for creating a simple way to handle errors in your own code from an earlier <code class='nx'>then</code>."
reject_catch.always_handle_errors:
  "By default promises provide a way to interact with errors but don't do anything themselves. If your reject handler does not do anything with an error, nothing will be done. If you want it to print the error, you will need to set a handler to do so."

promise_libraries.title: "Promise Libraries"

chain_transform.title: "Chain Transformations"

chain_async.title: "Chain Asyncronous Work"

chain_rescue.title: "Rescuing a Chain"

use_case_cache.title: "Use Case: Caching"

debug_promises.title: "Debugging Promises"